package com.you.weather.observer.api;

import java.util.Observable;
import java.util.Observer;

import com.you.weather.observer.DisplayElement;
import com.you.weather.observer.Subject;

public class ConcreteObserver implements Observer,DisplayElement{
	private float temperature;
	private float humidiry;
	//用来和主题绑定连接,用于注册和取消
	private Observable observable;
	//注册为观察者
	public ConcreteObserver(Observable observable) {
		this.observable = observable;
		observable.addObserver(this);
	}

	@Override
	public void display() {
		System.out.println("temperature:"+temperature+"  "+"humidiry:"+humidiry);
		
	}

	@Override
	public void update(Observable o, Object arg) {
		//继承接口中的update方法,Java 中的instanceof 运算符是用来在运行时指出对象是否是特定类的一个实例
		if(o instanceof WeatherData){
			WeatherData weatherData = (WeatherData) o;
			//通过拉的方式获取主题中自己所需的状态
			this.temperature = weatherData.getTemperature();
			this.humidiry = weatherData.getHumidiry();
			display();
		}
	}

}
